<template>
  <div :class="$style.root">

  </div>
</template>

<script>
import { Map, TileLayer, Polygon } from "maptalks";
export default {
  props: {
    option: Object,
    baseLayer: Object,
    boundary: Object
  },
  data() {
    return {
      map: {},
      viewPoint:{},
    };
  },
  mounted() {
    let mask = new Polygon(this.boundary.geometry.coordinates);
    let baseLayer = new TileLayer("baseLayer", this.baseLayer).setMask(mask);
    this.option.baseLayer = baseLayer;
    this.map = new Map(this.$el, this.option);




    /**/
    // this.option.center=

    /**/
    let c=this.$store.state.viewPoint;

    this.map.setCenter([ c.x, c.y]);

    let that=this


    this.map.on('moving moveend', function (e) {
      let point=e.target.getCenter();
      if(that.$parent.$refs.cesium){
        that.$parent.$refs.cesium.changeCameraPosition(point)
      }

    });


    /*二维联动三维缩放*/
    this.map.on('zooming zoomend', function (e) {
      //e.target.getCenter(), e.target.getZoom()
      let cesium=that.$parent.$refs.cesium;
      // cesium.setZoom(e.target.getZoom());

    });

    this.map.on('pitch', function (e) {
      // e.target.getPitch()
    });

    this.map.on('rotate', function (e) {
      // e.target.getBearing()
    });



  },
  methods:{
    setCenter:function (c) {
      this.map.setCenter(c);
    },
    setZoom:function (v) {
      this.map.setZoom(Math.ceil(v/1000));
    },
    /*叠加地图*/
    overlayLayer:function (item) {
      let layer=new TileLayer(item.id,{
        renderer : 'canvas', // set TileLayer's renderer to canvas
        // crossOrigin : 'anonymous',
        urlTemplate: item.urlTemplate,
        tileSystem:item.tileSystem,
        // spatialReference:item.spatialReference,
      });
      this.map.addLayer(layer)
      /*var vectorLayers = this.map.getLayers(function (layer) {
        console.log(layer)
      });*/
    },
    /*移除地图*/
    removeLayer(id){
      console.log(id)
      var vectorLayers = this.map.getLayers(function (layer) {
        return layer._id==id
      });

      this.map.removeLayer(vectorLayers)
    }
  },

  watch:{
    baseLayer(){
      let mask = new Polygon(this.boundary.geometry.coordinates);
      let baseLayer = new TileLayer("baseLayer", this.baseLayer).setMask(mask);
      this.map.setBaseLayer(baseLayer);
    },
    boundary() {
      let mask = new Polygon(this.boundary.geometry.coordinates);
      this.map.getBaseLayer().setMask(mask);
      this.map.fitExtent(mask.getExtent());

    },
    /*监听地图事件 三维图位置同步*/
    viewPoint(v){
      console.log(v)
    },
  }
};
</script>

<style lang="scss" module>
.root {
  width: 100%;
  height: 100%;
}
</style>
