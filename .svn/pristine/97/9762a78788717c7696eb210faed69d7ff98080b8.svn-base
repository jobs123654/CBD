<template>
  <div id="cesium-scene"></div>
</template>

<script>
export default {
  name: "CesiumScene",
  data() {
    return {
      sceneConfig: config.threeDimensional
    };
  },
  mounted() {
    this.init();
  },
  beforeDestroy() {
    this.destroyScene();
  },
  watch: {
    sceneConfig: {
      handler(val, oldVal) {
        this.init();
      },
      deep: true
    }
  },
  methods: {
    init() {
      let self = this;
      if (!window.Viewer) {
        this.$Spin.show({
          render: h => {
            return h("div", [
              h("Icon", {
                class: "demo-spin-icon-load",
                props: {
                  type: "md-globe",
                  size: 18
                }
              }),
              h("div", "场景加载中...")
            ]);
          }
        });
        let viewer = new Cesium.Viewer(this.$el, this.sceneConfig.option);
        window.Viewer = viewer;
        Viewer._cesiumWidget._creditContainer.style.display = "none";
        //添加SuperMap iServer发布的影像服务
        Viewer.imageryLayers.addImageryProvider(
          new Cesium.SuperMapImageryProvider({
            url: self.sceneConfig.map_url
          })
        );
      } else {
        // 切换场景，清除上一个场景的所有图层
        if (Viewer.scene.layers._layerQueue.length > 0) {
          Viewer.scene.layers.removeAll(true);
        }
      }
      let scene = Viewer.scene;
      let widget = Viewer.cesiumWidget;
      let promise = scene.open(this.sceneConfig.url);
      Cesium.when.all(
        promise,
        layers => {
          layers.forEach(layer => {
            if (layer.name && layer.name.indexOf("JZ") == -1) {
              layer.selectEnabled = false;
            }
          });
          if (layers.length > 1) {
            self.$emit("startQuery", true);
            self.$Message.success({
              content: "已开启楼座/楼宇查询！",
              duration: 4
            });
          } else {
            self.$emit("startQuery", false);
            self.$Message.error({
              content: "当前场景不支持楼座/楼宇查询！",
              duration: 4
            });
          }

          let point = new Cesium.Cartesian3(
            self.sceneConfig.center.x,
            self.sceneConfig.center.y,
            self.sceneConfig.center.z
          );
          let pointCartographic = scene.camera._projection.unproject(point);
          let pointCX = Cesium.Math.toDegrees(pointCartographic.longitude);
          let pointCY = Cesium.Math.toDegrees(pointCartographic.latitude);

          // 设置相机位置，定位至模型
          scene.camera.setView({
            destination: Cesium.Cartesian3.fromDegrees(
              pointCX,
              pointCY,
              pointCartographic.height
            ),
            orientation: {
              heading: 0,
              pitch: -Cesium.Math.PI_OVER_TWO,
              roll: 0
            }
          });
        },
        e => {
          let title = "加载SCP失败，请检查网络连接状态或者url地址是否正确？";
          widget.showErrorPanel(title, undefined, e);
        }
      );
      setTimeout(() => {
        this.$Spin.hide();
      }, 3000);
    },
    destroyScene() {
      if (window.Viewer) {
        try {
          window.Viewer.destroy();
        } catch (e) {
          console.error("摧毁viewer失败！");
        }
        window.Viewer = null;
      }
    }
  }
};
</script>
<style lang='scss' scoped>
#cesium-scene {
  width: 100%;
  height: 100%;
}
</style>