<template>
  <div :class="$style.root">

  </div>
</template>

<script>
export default {
  name: "Cesium",
  props: {
    option: Object,
    url: String,
    center: Object
  },
  data: function() {
    return {
      scene:{},
      viewer: {},
      flyToPoint: {}
    };
  },
  mounted: function() {
    this.loadMap();
    this.eventListener();
  },
  methods: {
    /*加载三维地图*/
    loadMap: function() {
      this.viewer = new Cesium.Viewer(this.$el, this.option);
      this.viewer._cesiumWidget._creditContainer.style.display = "none"; // 关闭图标
      this. scene = this.viewer.scene;
      var widget = this.viewer.cesiumWidget;

      /*缩小*/
      // viewer.camera.zoomOut(1000);
      let that = this;

      try {
        var promise =this. scene.open(this.url);

        Cesium.when.all(
          promise,
          function(layers) {
            /*创建笛卡尔空间坐标*/
            that.$store.state.viewPoint=that.center;
            // let b = that.$store.state.viewPoint;
              let b=that.center;
            var point = new Cesium.Cartesian3(b.x,b.y,b.z);

            var pointCartographic = that.scene.camera._projection.unproject(point);
            //转换至经纬度
            var pointCX = Cesium.Math.toDegrees(pointCartographic.longitude);

            var pointCY = Cesium.Math.toDegrees(pointCartographic.latitude);

            /*监听缩放事件*/


            //设置相机位置，定位至模型
            that.scene.camera.setView({
              destination: Cesium.Cartesian3.fromDegrees(
                pointCX,
                pointCY,
                pointCartographic.height
              ),
              orientation: {
                heading:0,
                pitch: -Cesium.Math.PI_OVER_TWO,
                roll: 0
              }
            });
          },
          function() {
            var title = "加载SCP失败，请检查网络连接状态或者url地址是否正确？";
            widget.showErrorPanel(title, undefined, e);
          }
        );
      } catch (e) {
        if (widget._showRenderLoopErrors) {
          var title = "渲染时发生错误，已停止渲染。";
          widget.showErrorPanel(title, undefined, e);
        }
      }
    },


    /*三维事件监听*/
    eventListener:function(){

      // 相机移动事件
      let that=this
      this.viewer.scene.camera.changed.addEventListener(function(e){

        // that.$store.commit('change',that.viewer.camera.position)
        let p=that.viewer.camera.position
        if (that.$parent.$refs.map){
          that.$parent.$refs.map.setCenter([p.x,p.y]);
        }

        // console.log(that.$store.state.viewPoint)

      })

      var handler = new Cesium.ScreenSpaceEventHandler(this.viewer.scene.canvas);
      handler.setInputAction(function(movement){
        // console.log('移动事件：',movement.endPosition);
        let   height = Math.ceil(that.viewer.camera.positionCartographic.height).toFixed(3);;
        // console.log(height)
      },Cesium.ScreenSpaceEventType.MOUSE_MOVE);

      // 鼠标滚轮事件
      handler.setInputAction(function(e) {
        // console.log(viewer.camera.getMagnitude())
        if (that.$parent.$refs.map){
          that.$parent.$refs.map.setZoom(that.viewer.camera.getMagnitude());
        }

      }, Cesium.ScreenSpaceEventType.WHEEL);


    },
    /*笛卡尔坐标转至经纬度*/
    getLonlat:function(p){
      var point = new Cesium.Cartesian3(p.x,p.y,this.center.z);

      var pointCartographic = this.scene.camera._projection.unproject(point);
      //转换至经纬度
      var pointCX = Cesium.Math.toDegrees(pointCartographic.longitude);

      var pointCY = Cesium.Math.toDegrees(pointCartographic.latitude);
      return {
        x:pointCX,
        y:pointCY,
        z:pointCartographic.height
      }
    },
    /*缩放*/
    setZoom:function(v){
      this.viewer.camera.zoomOut(v*100);

      // console.log(v)
      // console.log(v*300)

      //2-7|540 5000
    },
    /*设置相机位置*/
    changeCameraPosition(p){
      let o=this.getLonlat(p);
      this.scene.camera.setView({
        destination: Cesium.Cartesian3.fromDegrees(o.x,o.y,o.z),
        orientation: {
          heading:0,
          pitch: -Cesium.Math.PI_OVER_TWO,
          roll: 0
        }
      });
    },
    /*计算高度值*/
    calculateAltitude:function (bounds) {
      var alt = bounds.right - bounds.left;
      if (alt > 15000) {
        alt = alt - 10000;
      } else if (alt > 1900) {
        alt = alt - 1000;
      } else if (alt > 100) {
        alt = alt - 100;
      } else if (alt > 10) {
        alt = alt - 10;
      }
      return alt;
    },
    /*飞行至某点*/
    flyTo: function(point) {
      this.viewer.camera.flyTo({
        destination: Cesium.Cartesian3.fromDegrees(point.x, point.y, point.z), // 设置位置
        orientation: {
          heading: 0.723822947387097,
          pitch: -0.45061029898791416,
          roll: 6.283185307179586
        },
        duration: 5, // 设置飞行持续时间，默认会根据距离来计算
        complete: function() {
          // 到达位置后执行的回调函数
          console.log("到达目的地");
        },
        cancle: function() {
          // 如果取消飞行则会调用此函数
          console.log("飞行取消");
        }
        /* pitchAdjustHeight: -90, // 如果摄像机飞越高于该值，则调整俯仰俯仰的俯仰角度，并将地球保持在视口中。
                     maximumHeight:5000, // 相机最大飞行高度
                     flyOverLongitude: 100, // 如果到达目的地有2种方式，设置具体值后会强制选择方向飞过这个经度*/
      });
    }
  },
  watch: {
    flyToPoint: function(v) {
      console.log(v);
    },

  }
};
</script>

<style lang="scss" module>
.root {
  width: 100%;
  height: 100%;
}
</style>
