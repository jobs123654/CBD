<template>
  <div class="measure">
    <ul>
      <li title="量距" @click="measureDis">
        <img src="../../../assets/images/工具/量距.png">
      </li>
      <li title="量面" @click="measureArea">
        <img src="../../../assets/images/工具/量面.png">
      </li>
      <li title="量高" @click="measureHeight">
        <img src="../../../assets/images/工具/量高.png">
      </li>
      <li title="清除" @click="clear">
        <img src="../../../assets/images/工具/删除.png">
      </li>
    </ul>
  </div>
</template>

<script>
let handlerDis, handlerArea, handlerHeight;
export default {
  name: "SceneMeasure",
  data() {
    return {};
  },
  components: {},
  computed: {},
  mounted() {},
  beforeDestroy() {},
  methods: {
    measureDis() {
      this.$emit("closeMeasure");
      if (!handlerDis) {
        handlerDis = new Cesium.MeasureHandler(
          Viewer,
          Cesium.MeasureMode.Distance,
          0
        );
        //注册测距功能事件
        handlerDis.measureEvt.addEventListener(function(result) {
          var dis = Number(result.distance);
          var distance =
            dis > 1000 ? (dis / 1000).toFixed(2) + "km" : dis.toFixed(2) + "m";
          handlerDis.disLabel.text = "距离:" + distance;
        });
        handlerDis.activeEvt.addEventListener(function(isActive) {
          if (isActive == true) {
            Viewer.enableCursorStyle = false;
            Viewer._element.style.cursor = "";
          } else {
            Viewer.enableCursorStyle = true;
          }
        });
      }
      this.deactiveAll();
      handlerDis && handlerDis.activate();
    },
    measureArea() {
      this.$emit("closeMeasure");
      if (!handlerArea) {
        //初始化测量面积
        handlerArea = new Cesium.MeasureHandler(
          Viewer,
          Cesium.MeasureMode.Area,
          0
        );
        handlerArea.measureEvt.addEventListener(function(result) {
          var area =
            result.area > 1000000
              ? (result.area / 1000000).toFixed(2) + "km²"
              : result.area + "㎡";
          handlerArea.areaLabel.text = "面积:" + area;
        });
        handlerArea.activeEvt.addEventListener(function(isActive) {
          if (isActive == true) {
            Viewer.enableCursorStyle = false;
            Viewer._element.style.cursor = "";
          } else {
            Viewer.enableCursorStyle = true;
          }
        });
      }
      this.deactiveAll();
      handlerArea && handlerArea.activate();
    },
    measureHeight() {
      this.$emit("closeMeasure");
      if (!handlerHeight) {
        //初始化测量高度
        handlerHeight = new Cesium.MeasureHandler(
          Viewer,
          Cesium.MeasureMode.DVH
        );
        handlerHeight.measureEvt.addEventListener(function(result) {
          var distance =
            result.distance > 1000
              ? (result.distance / 1000).toFixed(2) + "km"
              : result.distance + "m";
          var vHeight =
            result.verticalHeight > 1000
              ? (result.verticalHeight / 1000).toFixed(2) + "km"
              : result.verticalHeight + "m";
          var hDistance =
            result.horizontalDistance > 1000
              ? (result.horizontalDistance / 1000).toFixed(2) + "km"
              : result.horizontalDistance + "m";
          handlerHeight.disLabel.text = "空间距离:" + distance;
          handlerHeight.vLabel.text = "垂直高度:" + vHeight;
          handlerHeight.hLabel.text = "水平距离:" + hDistance;
        });
        handlerHeight.activeEvt.addEventListener(function(isActive) {
          if (isActive == true) {
            Viewer.enableCursorStyle = false;
            Viewer._element.style.cursor = "";
          } else {
            Viewer.enableCursorStyle = true;
          }
        });
      }
      this.deactiveAll();
      handlerHeight && handlerHeight.activate();
    },
    clear() {
      this.$emit("closeMeasure");
      handlerDis && handlerDis.clear();
      handlerArea && handlerArea.clear();
      handlerHeight && handlerHeight.clear();
    },
    deactiveAll() {
      handlerDis && handlerDis.deactivate();
      handlerArea && handlerArea.deactivate();
      handlerHeight && handlerHeight.deactivate();
    }
  }
};
</script>

<style lang="scss" scoped>
.measure {
  position: absolute;
  right: 0px;
  top: 30px;
  ul {
    padding: 0.05rem;
    background: url(../../../assets/images/工具面板.png) center/100% 100%;
    color: #ffffff;
    border: 1px solid #3260bd;
    font-size: 12px;
    text-align: center;
    list-style: none;
    cursor: pointer;
  }
}
</style>
